
Táximo Challenge - Synchronous Shopping

A continuación encontrará un problema de programación que pretende medir varias habilidades 
de un Full Stack Developer. Es un problema de programación que podrá encontrar en Hackerrank:
https://www.hackerrank.com/challenges/synchronous-shopping/problem.

Se debe construir una aplicación web que solucione el problema para cada entrada de datos a 
través de una API. La aplicación debe estar construida en Javascript en el lado del servidor.
Aunque el principal criterio de evaluación es que la aplicación funcione, la organización del 
código, la arquitectura usada y la documentación del código son importantes en la evaluación.


Condiciones Generales:
	1. Usar OOP (Programación Orientada a Objetos). En los casos en los que no se use, justificar
	   las razones

	2. La aplicación debe estar publicada en una plataforma como Heroku (Google Cloud, AWS, ...)

	3. La forma en la que se va a probar la aplicación es por medio de una API que debe ser
	   accesible a través de Internet, esta API debe estar disponible solo con un nombre de 
	   usuario (taximo_api_user) y un checksum generado así:
	   		checksum = SHA256(taximo_api_user)

	4. Uso de pruebas unitarias y de integración

	5. Uso de bases de datos relacionales, preferiblemente PostgreSQL (para almacenar el resultado
	   de cada input y evitar recalcular la solución del problema)

	6. Uso de un framework Javascript del lado del servidor (como nodeJS)

	7. Una interfaz que permita el ingreso de uno de los casos individuales de prueba y retorne 
	   el resultado


Entregables:
	1. Una URL del repositorio de código (github, bitbucket, gitlab) de acceso público

	2. Una URL de la interfaz donde se puede hacer la prueba de uno de los casos de prueba

	3. Una URL de la API de la aplicación, del tipo: 
	   https://[my_app_name].herokuapp.com/api/v1/synchronous_shopping

	4. Documento donde se describan las capas de la aplicación, las clases, modelo de datos 
	   y detalles de implementación


Evaluación:
	1. [1 puntos] Organización y claridad del código, comentarios, modelo de datos y uso del 
	   control de versiones
	
	2. [3 puntos] Resultado de uno de los casos de pruebas por medio de la interfaz (como se plantea 
	   en el ejemplo de Hackerrank)
	
	3. [5 puntos] Resultado de varios casos de pruebas a través de la API. Para este caso la 
	   lectura de los datos de entrada debe ser como sigue:
	   		Datos de entrada originales (usados en la interfaz):
	   			5 5 5
				1 1
				1 2
				1 3
				1 4
				1 5
				1 2 10
				1 3 10
				2 4 10
				3 5 10
				4 5 10

			Como serán pasados a la API:
				parameters=5,5,5
				shoping_centers=1,1-1,2-1,3-1,4-1,5
				roads=1,2,10-1,3,10-2,4,10-3,5,10-4,5,10

			Las consultas de prueba para la API se realizan con el siguiente formato:
				curl \
   					-d 'username=taximo_api_user&parameters=5,5,5&shoping_centers=1,1-1,2-1,3-1,4-1,5&roads=1,2,10-1,3,10-2,4,10-3,5,10-4,5,10&checksum=cd7ced88fb72ee862940d5664555251f9ba044d8478a71a7b70b04bd708c2796' \
   					-H "Content-Type: application/x-www-form-urlencoded"  \
   					-X POST 'https://[my_app_name].herokuapp.com/api/v1/synchronous_shopping'

			El resultado deberá retornarse en formato JSON:
				{'minimum_time': 30}

	4. [1 puntos] Documento con especificación de clases y modelo de datos usado		
